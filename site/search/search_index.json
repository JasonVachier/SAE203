{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DOCUMENTATION SAE203","text":""},{"location":"#presentation","title":"Pr\u00e9sentation !","text":"<p>Bonjour chers administrateur syst\u00e8me ! Bienvenue sur la doc du programme aggreg.py</p> <p>1 - A quoi sert aggreg.py ?</p> <p>aggreg.py est un programme \u00e0 ex\u00e9cut\u00e9 sur une machine aggregateur qui vas lire n flux RSS \u00e0 partir de plusieurs URLs, et en g\u00e9nere une page HTML. aggreg.py contien plusieur fonction importante :</p> <pre><code>1 - charge_urls = Charge les urls de flux rss et les analyse pour mettre \u00e0 part les erreurs potentielles\n\n2 - convert_string_date = Fonction qui permet de convertir le format des dates du flux RSS en format exploitable pour la fonction Datetime\n\n3 - fusion_flux = La fonction permet de prendre tout les flux de tout les serveurs, les fusionne pour n'en faire plus qu'un. Une fois la fusion faite on peut tri\u00e9 en fonction de la criticit\u00e9 ou de la date des \u00e9vents\n\n4 - genere_html = Cette fonction r\u00e9cup\u00e8re les flux analys\u00e9e ( avec les informations importante et tri\u00e9 ) et cr\u00e9e une page html \u00e0 partir de ces information. int\u00e8gres un autre fichier 'style.css' pour la lisibilit\u00e9\n\n5 - litYaml = la fonction r\u00e9cup\u00e8re un fichier config en yaml, et le lit et renvoi sa config\n</code></pre> <p>2 - Pourquoi un fichier yaml ?</p> <p>Un fichier conf.yaml est mis en place afin de faciliter l'utilsation de aggreg.py</p> <p>conf.yaml :</p> <pre><code>sources:                                    # Liste des URLs pour r\u00e9cup\u00e9rer rss.xml\n    - http://serveur1.net/rss.xml\n    - http://serveur2.net/rss.xml\n    - http://serveur3.net/rss.xml\n    ....\nrss-name: rss.xml                           # Donne le nom du flux rss \u00e0 t\u00e9\u00e9charger\ndestination: /var/www/aggreg/index.html     # Indique la destination du fichier sortie HTML\ntri-chrono: True                            # si True faire le trie chronologiquement, si False trie par criticit\u00e9\n</code></pre> <p>Vas voir les autres pages pour :</p> <ul> <li> <p>Le guide d'installation et de param\u00e9trage</p> </li> <li> <p>Le guide d'utilisation</p> </li> <li> <p>Le Guide de r\u00e9solution des probl\u00e8mes</p> </li> </ul>"},{"location":"AggregPy/","title":"DOCUMENTATION SAE203","text":""},{"location":"AggregPy/#cest-ici-que-ce-trouve-le-code-aggregpy","title":"C'est ici que ce trouve le code aggreg.py","text":""},{"location":"AggregPy/#exemple-de-code-python","title":"Exemple de code Python","text":"<p>```python def hello_world():     print(\"Hello, world!\")</p>"},{"location":"Etape1/","title":"DOCUMENTATION SAE203","text":""},{"location":"Etape1/#bienvenue-dans-le-guide-dinstallation-et-de-parametrage","title":"Bienvenue dans le guide d'installation et de param\u00e9trage !","text":""},{"location":"Etape1/#etape-1-larchitecture-prerequis","title":"Etape 1 : L'Architecture | Pr\u00e9requis","text":"<p>Il te faut des serveurs (ex: serveur1.net ; serveur2.net ; serveur3.net) (1G RAM suffira) :</p> <pre><code>- Ces machines n'ont pas d'interface graphique\n\n- Avoir un serveur http Apache2 install\u00e9 avec un h\u00f4te virtuel configur\u00e9\n\n- c'est ces machines qui aurons les \u00e9vement en flux rss\n</code></pre> <p>Il te faut aussi une machine aggragteur (ex: aggreg.net) (1G RAM suffira) :</p> <pre><code>- Cette machine n'a pas d'interface graphique\n\n- Avoir un serveur Apache2 install\u00e9 avec un h\u00f4te virtuel configur\u00e9\n</code></pre> <p>Enfin un client (2G RAM suffira) :</p> <pre><code>- Cette machine \u00e0 une interface graphique et un acces \u00e0 un navigateur web\n</code></pre>"},{"location":"Etape1/#etape-2-serveurs","title":"Etape 2 : Serveurs","text":"<p>En ce qui concernes les serveurs v\u00e9rifi\u00e9 que les flux des \u00e9venement soit bien sous le format suivant :</p> <pre><code>rss.xml\n</code></pre> <p>Ces flux doivent se retrouv\u00e9 sur votre serveur apache dans l'arbor\u00e9sence suivante :</p> <pre><code>X@serveur1: ~/var/www/serveur1\n</code></pre> <p>C'est tout ce dont tu \u00e0 vraiment besoin sur tes serveur !</p>"},{"location":"Etape1/#etape-3-aggregateur","title":"Etape 3 : Aggr\u00e9gateur","text":"<p>aggreg.net est un peut le centre de tout il va ex\u00e9cut\u00e9 un script python pour r\u00e9cup\u00e9rer le flux de tout tes serveur et renvoyer une page html</p> <p>Sur cette machines tu doit installer plusieur choses : </p> <pre><code>- aggreg.py         # Le programme d'aggr\u00e9gation\n\n- conf.yaml         # Fichier qui permettra de configur\u00e9 le travail de ton programme python rapidement et facilement\n\n- style.css         # Ajout d'un peut de style sur nos logs.html tout de m\u00eame !!!\n</code></pre> <p>Pour aggreg.py je t'invite \u00e0 : Cliquer ici</p> <p>Pour conf.yaml c'est super simple ! cr\u00e9er un fichier du m\u00eame nom et inscris-y :</p> <pre><code>sources:                                    \n        - http://serveur1.net/rss.xml\n        - http://serveur2.net/rss.xml\n        - http://serveur3.net/rss.xml\n        .... (ajoute autant de lien que tu as de serveur)\n    rss-name: rss.xml                           \n    destination: /var/www/aggreg/index.html     \n    tri-chrono: True\n</code></pre> <p>Pour style.css je t'invite \u00e0 : Cliquer ici</p>"},{"location":"StyleCss/","title":"DOCUMENTATION SAE203","text":""},{"location":"StyleCss/#cest-ici-que-ce-trouve-stylecss","title":"C'est ici que ce trouve style.css","text":""}]}