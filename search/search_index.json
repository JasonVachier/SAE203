{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DOCUMENTATION SAE203","text":""},{"location":"#presentation","title":"Pr\u00e9sentation","text":"<p>Bonjour chers administrateurs syst\u00e8me,</p> <p>Bienvenue dans la documentation du programme aggreg.py.</p>"},{"location":"#a-quoi-sert-aggregpy","title":"A quoi sert 'aggreg.py' ?","text":"<p>'aggreg.py' est un programme con\u00e7u pour \u00eatre ex\u00e9cut\u00e9 sur une machine agr\u00e9gatrice. Il lit des flux RSS \u00e0 partir de plusieurs URLs et g\u00e9n\u00e8re une page HTML. Le programme 'aggreg.py' contient plusieurs fonctions importantes :</p> <ul> <li> <p>charge_urls : Charge les URLs des flux RSS et les analyse pour identifier d'\u00e9ventuelles erreurs.</p> </li> <li> <p>convert_string_date : Cette fonction permet de convertir le format des dates du flux RSS en un format exploitable par le module Datetime.</p> </li> <li> <p>fusion_flux : Cette fonction prend tous les flux de tous les serveurs, les fusionne en un seul. Une fois la fusion effectu\u00e9e, il est possible de les trier en fonction de la criticit\u00e9 ou de la date des \u00e9v\u00e9nements.</p> </li> <li> <p>genere_html : Cette fonction r\u00e9cup\u00e8re les flux analys\u00e9s (avec les informations importantes et tri\u00e9es) et cr\u00e9e une page HTML \u00e0 partir de ces informations. Elle int\u00e8gre \u00e9galement un autre fichier 'style.css' pour une meilleure lisibilit\u00e9.</p> </li> <li> <p>litYaml : Cette fonction r\u00e9cup\u00e8re un fichier de configuration au format YAML, le lit et renvoie sa configuration.</p> </li> </ul>"},{"location":"#configuration-a-partir-dun-fichier-yaml","title":"Configuration \u00e0 partir d'un fichier Yaml","text":"<p>Un fichier 'conf.yaml' est mis en place afin de faciliter l'utilisation de aggreg.py.</p> <p>conf.yaml :</p> <pre><code>sources:                                    # Liste des URLs pour r\u00e9cup\u00e9rer rss.xml\n    - http://serveur1.net/rss.xml\n    - http://serveur2.net/rss.xml\n    - http://serveur3.net/rss.xml\n    ....\nrss-name: rss.xml                           # Donne le nom du flux rss \u00e0 t\u00e9l\u00e9charger\ndestination: /var/www/aggreg/index.html     # Indique la destination du fichier de sortie HTML\ntri-chrono: True                            # Si True, effectue le tri chronologiquement ; si False, trie par criticit\u00e9\n</code></pre>"},{"location":"#consulter-les-autres-pages-pour","title":"Consulter les autres pages pour","text":"<ul> <li> <p>Le guide d'installation et de param\u00e9trage</p> </li> <li> <p>Le guide d'utilisation</p> </li> <li> <p>FAQ</p> </li> <li> <p>T\u00e9l\u00e9charger les fichiers sources</p> </li> </ul>"},{"location":"AggregPy/","title":"DOCUMENTATION SAE203","text":""},{"location":"AggregPy/#cest-ici-que-ce-trouve-le-code-aggregpy","title":"C'est ici que ce trouve le code aggreg.py","text":"<pre><code>\n# Importation des modules\n\nimport feedparser\nimport sys\nimport urllib.request\nimport yaml\nimport os\nfrom datetime import datetime\n\n\ndef charge_urls(liste_url):\n\n    \"\"\"Charge les urls de flux rss et les analyse pour mettre \u00e0 part les erreurs potentielles\"\"\"\n\n    # Cr\u00e9ation d'une liste initial\n    urls_analysees = []\n\n    # Cr\u00e9ation d'une boucle qui parcours la liste d'url pour chaque \u00e9lement \"url\"\n    for url in liste_url:\n        try:               \n            flux_brut = urllib.request.urlopen(url)           \n            flux_brut = feedparser.parse(url)  \n\n            if flux_brut['bozo'] != False:\n                urls_analysees.append(None)\n            else:\n                urls_analysees.append(flux_brut)\n\n        # Initialisation d'exeptions pour certains cas\n        except urllib.error.HTTPError:        \n            urls_analysees.append(None)      \n        except urllib.error.URLError:         \n            urls_analysees.append(None)       \n        except ValueError:        \n            urls_analysees.append(None)\n\n    return urls_analysees     # Retourne les urls analys\u00e9es\n\n\ndef convert_string_date(publishedDate: str):\n    \"\"\"Fonction qui permet de convertir le format des dates du flux RSS en format exploitable pour\n    la fonction Datetime\"\"\"\n\n    date_format = \"%a, %d %b %Y %H:%M\"                              # Prend chaque \u00e9l\u00e9ment de la date et les met dans des variables (fonction Datetime)\n\n    date_object = datetime.strptime(publishedDate, date_format)     # Met la date dans le bon format\n\n    return date_object                                              # Retourne la date exploitable pour le trie\n\ndef fusion_flux(urls_analysees, liste_flux, tri_chrono):\n    \"\"\"\n    La fonction permet de prendre tout les flux de tout les serveurs, les fusionne pour n'en faire plus \n    qu'un. Une fois la fusion faite on peut tri\u00e9 en fonction de la criticit\u00e9 ou de la date des \u00e9vents\n    \"\"\"\n\n    # Cr\u00e9ation d'une liste initial\n    evenements = []\n\n    # parcours les URL (lien des serveur) et du contenues analysees\n    for flux, url in zip(liste_flux, urls_analysees):\n        if flux is not None:\n            # Dans le flux analys\u00e9 on extr\u00e9 les informations importantes\n            for item in flux.entries:\n                evenement = {\n                    'titre': item.title,\n                    'categorie': item.get('category', 'MINOR'),             # Si la cat\u00e9gorie n'est pas sp\u00e9cifi\u00e9 dans le flux on met automatiquement en \"Minor\"\n                    'serveur': url.split('/')[2],                           # R\u00e9cup\u00e8re la provenance de l'erreur (ex: Serveur2)\n                    'date_publi': item.published,                           # R\u00e9cup\u00e8re la date de l'erreur\n                    'date_program': convert_string_date(item.published),    # convertie la date dans le bon format\n                    'lien': item.link,                                      # prend le lien entier de l'erreur\n                    'description': item.get('description', '')              # cr\u00e9ation d'une description, si il n'y en a pas, la chaine est vide\n                }\n                # Ajout du dictionnaire dans la liste pr\u00e9c\u00e9demment cr\u00e9e\n                evenements.append(evenement)\n\n\n    # Trie en fonction des informations ci-dessus\n    if tri_chrono == True: \n        # Si l'utilisateur veut trier par chronologie du plus r\u00e9cent au plus vieux\n        # - On \u00e9ffectue un trie 'sorted', en prenant dabors la date, puis sa cat\u00e9gorie. \n        # - \"Reverse\" pour tri\u00e9 du plus r\u00e9cent au plus vieux \n        evenements = sorted(evenements, key=lambda x: (x['date_program'], x['categorie']), reverse=True)\n    else:\n        # Si l'utilisateur veut trier par criticit\u00e9 de Critical \u00e0 Minor\n        # - On \u00e9ffectue un trie 'sorted', en prenant dabors sa criticit\u00e9, puis sa date. \n        evenements = sorted(evenements, key=lambda x: (x['categorie'], x['date_program']))\n\n    return evenements     # Retourne mes \u00e9venement tri\u00e9 par ordre chrono ou criticit\u00e9\n\ndef genere_html(liste_evenements, chemin_html,date_heure_actuelle):\n    \"\"\"\n    Cette fonction r\u00e9cup\u00e8re les flux analys\u00e9e ( avec les informations importante et tri\u00e9 ) et cr\u00e9e\n    une page html \u00e0 partir de ces information. int\u00e8gres un autre fichier 'style.css' pour la lisibilit\u00e9 \n    \"\"\"\n    # Ouvre le fichier HTML en mode 'w' pour l'\u00e9criture (il faut donc les droit sur aggreg)\n    with open(chemin_html, 'w', encoding='utf-8') as fichier_html:\n        # On cr\u00e9e l'en t\u00eate du la page html et on y int\u00e8gre notre style.css\n        fichier_html.write(f\"\"\"&lt;!DOCTYPE html&gt;\n                    &lt;html lang=\"fr\"&gt;\n                    &lt;head&gt;\n                        &lt;meta charset=\"utf-8\"&gt;\n                        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n                        &lt;title&gt;Logs des \u00c9venement&lt;/title&gt;                                       \n                        &lt;link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\"/&gt;             \n                    &lt;/head&gt;\n                    &lt;body&gt;\n                        &lt;h1&gt;Logs des \u00c9venement - {date_heure_actuelle}&lt;/h1&gt;\\n\\n\"\"\")                                 \n\n        # Impl\u00e9mentation des \u00e9l\u00e9ments souhait\u00e9 dans la page html\n        for evenement in liste_evenements:\n            # Boucle afin de d\u00e9termin\u00e9 la coucleur en fonction de la criticit\u00e9, et cr\u00e9e un bloc pour chaque \u00e9venement\n            couleur = \"\"\n            if evenement['categorie'].upper() == \"MINOR\":      # si c'est MINOR la couleur est verte\n                couleur = \"green\"\n            elif evenement['categorie'].upper() == \"MAJOR\":    # si c'est MAJOR la couleur est orange\n                couleur = \"orange\"\n            elif evenement['categorie'].upper() == \"CRITICAL\": # si c'est CRITICAL la couleur est rouge\n                couleur = \"red\"\n\n            fichier_html.write(f\"\"\"&lt;article&gt;                                       \n                    &lt;h2&gt;{evenement['titre']}&lt;/h2&gt;                          \n                    &lt;p&gt;from: {evenement['serveur']}&lt;/p&gt;                             \n                    &lt;p&gt;{evenement['date_publi']}&lt;/p&gt;                         \n                    &lt;p style=\"color: {couleur};\"&gt;{evenement['categorie']}&lt;/p&gt;       \n                    &lt;p&gt;&lt;a href=\"{evenement['lien']}\"&gt;{evenement['lien']}&lt;/a&gt;&lt;/p&gt;    \n                    &lt;p&gt;{evenement['description']}&lt;/p&gt;                              \n                    &lt;/article&gt;\\n\\n\"\"\")                                              \n        # \u00e9criture de la fin du fichier html\n        fichier_html.write(\"\"\"\n                    &lt;/body&gt;\n                &lt;/html&gt;\"\"\")\n\ndef litYaml(chemin_config):\n    \"\"\"la fonction r\u00e9cup\u00e8re un fichier config en yaml, et le lit et renvoi sa config\"\"\"\n    # ouvre le fichier \u00e0 l'endroit indiqu\u00e9, avec les droit 'r' de lecture\n    with open(chemin_config, 'r') as fichier:\n        config = yaml.safe_load(fichier)\n    return config # retourne la config\n\ndef main():\n\n    vardoc = os.path.dirname(os.path.realpath(__file__))\n\n    chemin_config = vardoc+'/conf.yaml'                                 # Indication de la localisation du fichier config yaml\n\n    config = litYaml(chemin_config)                                     # lectire de la config yaml en fonction de 'chemin_config'\n\n    liste_urls = config['sources']                                      # prend les source du fichier conf.yaml sans la var(liste_url)\n    destination = config['destination']                                 # prend dans la config la destination de la page HTML\n    tri_chrono = config['tri-chrono']                                   # voit si la config d\u00e9cide de tri\u00e9 en orde chrono ou pas\n\n    # Charger les documents RSS \u00e0 partir des URLs\n    flux_rss = charge_urls(liste_urls)                                  # Charge les fichier rss \u00e0 partir des sources (\"liste_urls\")\n\n    tri = fusion_flux(liste_urls, flux_rss, tri_chrono)                 # fusionne et trie tout les flux RSS des 3 serveur\n\n    date_heure_actuelle = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")  # R\u00e9cup\u00e8re la date actuel pour l'afficher sur le site des logs\n\n    print('Page Actualis\u00e9e')                                            # affiche un message pour signal\u00e9 que le processuse a bien fonctionn\u00e9\n    genere_html(tri, destination,date_heure_actuelle)                   # g\u00e9n\u00e9re la page html \u00e0 partir du flux fusionn\u00e9 et tri\u00e9 vers la destination de la config (\"destination\"), avec la date actuel\n\nif __name__ == \"__main__\":\n    main()\n\n</code></pre>"},{"location":"Etape1/","title":"DOCUMENTATION SAE203","text":""},{"location":"Etape1/#bienvenue-dans-le-guide-dinstallation-et-de-parametrage","title":"Bienvenue dans le guide d'installation et de param\u00e9trage !","text":""},{"location":"Etape1/#etape-1-prerequis-materiels-et-logiciels","title":"\u00c9tape 1 : Pr\u00e9requis Mat\u00e9riels et Logiciels","text":"<p>Serveurs (ex : serveur1.net, serveur2.net, serveur3.net)</p> <ul> <li> <p>Configuration mat\u00e9rielle : 1 Go de RAM minimum.</p> </li> <li> <p>Interface graphique : Ces machines n'ont pas d'interface graphique.</p> </li> <li> <p>Logiciels requis : Serveur Apache2 install\u00e9 avec un h\u00f4te virtuel configur\u00e9.</p> </li> <li> <p>Utilisation : Ces machines recevront les \u00e9v\u00e9nements en flux RSS.</p> </li> </ul> <p>Machine Agr\u00e9gatrice (ex : aggreg.net) :</p> <ul> <li> <p>Configuration mat\u00e9rielle : 1 Go de RAM minimum.</p> </li> <li> <p>Interface graphique : Cette machine n'a pas d'interface graphique</p> </li> <li> <p>Logiciels requis : Serveur Apache2 install\u00e9 avec un h\u00f4te virtuel configur\u00e9, et Python.</p> </li> <li> <p>Utilisation : Cette machine sera utilis\u00e9e pour ex\u00e9cuter le programme aggreg.py.</p> </li> </ul> <p>Client</p> <ul> <li> <p>Configuration mat\u00e9rielle : 2 Go de RAM minimum.</p> </li> <li> <p>Interface graphique : Cette machine dispose d'une interface graphique.</p> </li> <li> <p>Acc\u00e8s : Un acc\u00e8s \u00e0 un navigateur web est requis</p> </li> </ul> <p>Assurez vous que toutes les machines respectent ces configurations pour le bon fonctionnement du programme aggreg.py</p>"},{"location":"Etape1/#etape-2-configuration-des-serveurs","title":"Etape 2 : Configuration des Serveurs","text":""},{"location":"Etape1/#verification-des-flux-rss","title":"V\u00e9rification des Flux RSS","text":"<p>Pour chaque serveur, assurez-vous que les flux des \u00e9v\u00e9nements sont bien au format suivant :</p> <pre><code>rss.xml\n</code></pre>"},{"location":"Etape1/#emplacement-des-fichiers-rss","title":"Emplacement des Fichiers RSS","text":"<p>Ces fichiers de flux doivent se trouver sur votre serveur Apache dans l'arborescence suivante :</p> <pre><code>X@serveurX: ~/var/www/serveurX\n</code></pre> <p>C'est tout ce dont vous avez vraiment besoin sur vos serveurs. Assurez-vous que cette structure soit respect\u00e9e pour le bon fonctionnement de l'agr\u00e9gation des flux RSS.</p>"},{"location":"Etape1/#etape-3-configuration-de-la-machine-agregatrice","title":"Etape 3 : Configuration de la Machine Agr\u00e9gatrice","text":""},{"location":"Etape1/#role-de-la-machine-agregatrice","title":"R\u00f4le de la Machine Agr\u00e9gatrice","text":"<p>La machine aggreg.net est le centre de l'agr\u00e9gation. Elle ex\u00e9cute un script Python pour r\u00e9cup\u00e9rer les flux de tous vos serveurs et g\u00e9n\u00e9rer une page HTML.</p> <p>Sur cette machine, installez les \u00e9l\u00e9ments suivants :</p> <pre><code>'aggreg.py'   # Le programme d'agr\u00e9gation.\n\n'conf.yaml'   # Fichier de configuration pour param\u00e9trer facilement le programme Python.\n\n'style.css'   # Ajout de style \u00e0 la page web.\n</code></pre> <p>Pour 'aggreg.py': Cliquez ici</p> <p>Cr\u00e9ez un fichier nomm\u00e9 'conf.yaml' et ins\u00e9rez-y le contenu suivant :</p> <pre><code>sources:                                    \n        - http://serveur1.net/rss.xml\n        - http://serveur2.net/rss.xml\n        - http://serveur3.net/rss.xml\n        .... ( ajoutez autant de liens que vous avez de serveurs)\n    rss-name: rss.xml                           \n    destination: /var/www/aggreg/index.html     \n    tri-chrono: True\n</code></pre> <p>Pour 'style.css': Cliquez ici</p>"},{"location":"Etape1/#script-dagregation-aggregpy","title":"Script d'Agr\u00e9gation 'aggreg.py'","text":"<p>Le script 'aggreg.py' se trouve dans votre r\u00e9pertoire '/home' ou dans un autre r\u00e9pertoire.</p> <p>Il est important de bien conna\u00eetre son emplacement pour l'automatisation.</p>"},{"location":"Etape1/#fichier-de-configuration-confyaml","title":"Fichier de Configuration 'conf.yaml'","text":"<p>Placez le fichier 'conf.yaml' dans un r\u00e9pertoire facile d'acc\u00e8s, car c'est le seul fichier que vous aurez \u00e0 modifier par la suite.</p>"},{"location":"Etape1/#stylecss","title":"style.css","text":"<p>Le fichier 'style.css' doit se trouver au m\u00eame endroit o\u00f9 la page HTML est g\u00e9n\u00e9r\u00e9e, donc dans votre serveur Apache :</p> <pre><code>/var/www/aggreg/style.css\n</code></pre> <p>Dans ce r\u00e9pertoire, vous pouvez \u00e9galement ajouter une image de fond de votre choix. Assurez-vous que l'image se nomme 'fond.jpg'. </p> <p>Je vous propose celle-ci par exemple : Cliquez ici</p>"},{"location":"Etape1/#etape-4-automatisation-de-lagregateur","title":"Etape 4 : Automatisation de l'agr\u00e9gateur","text":"<p>Pour l'automatisation, je vous propose d'utiliser 'crontab'.</p> <p>Le but est que le programme se lance automatiquement toutes les minutes, heures ou jours selon vos besoins.</p> <p>Pour cela :</p> <pre><code>crontab -e\n</code></pre> <p>Puis :</p> <pre><code>.---------------- minutes (0 - 59)\n|  .------------- heures (0 - 23)\n|  |  .---------- jours (1 - 31)\n|  |  |  .------- mois (1 - 12) OR jan,feb,mar,apr ...\n|  |  |  |  .---- jour de la semaine (0 - 6) (Dimanche =0 ou 7)\n|  |  |  |  |\n*  *  *  *  * python3 /chemin/vers/aggreg.py\n</code></pre> <p>Apr\u00e8s cela, si tout s'est bien pass\u00e9, le programme se lance automatiquement et g\u00e9n\u00e8re une page HTML avec les flux de vos diff\u00e9rents serveurs.</p>"},{"location":"Etape1/#etape-5-configuration-du-client","title":"Etape 5 : Configuration du Client","text":"<p>Pour la machine client, vous devez avoir acc\u00e8s au serveur Apache de aggreg.net pour visualiser la page HTML des logs des \u00e9v\u00e9nements. Et pour cela, rien de plus simple !</p> <p>Sur votre navigateur web, installez l'extension LiveHosts.</p> <p> Github de LiveHosts</p> <p>LiveHosts sur Google Store</p> <p>LiveHosts sur Firefox</p> <p>Puis configurez LiveHosts comme suit :</p> <pre><code>Hostname : (par exemple: aggreg.net)\n\nIP : (par exemple 192.168.122.20)\n</code></pre>"},{"location":"Etape2/","title":"DOCUMENTATION SAE203","text":""},{"location":"Etape2/#bienvenue-dans-le-guide-dutilisation","title":"Bienvenue dans le guide d'utilisation !","text":""},{"location":"Etape2/#passons-a-lutilisation","title":"Passons \u00e0 l'utilisation","text":"<p>Si vous avez suivi les \u00e9tapes pr\u00e9c\u00e9dentes, l'utilisation est un jeu d'enfant.</p> <p>Vous avez deux choses \u00e0 prendre en compte :</p> <ul> <li> <p>Le fichier de configuration 'conf.yaml'</p> </li> <li> <p>Le client ayant LiveHosts</p> </li> </ul> <p>Une fois la configuration effectu\u00e9e sur vos machines (si ce n'est pas d\u00e9j\u00e0 fait), vous pouvez \u00e9diter conf.yaml si vous souhaitez apporter des modifications.</p> <p>Par exemple, vous pouvez activer le tri chronologique :</p> <pre><code>tri-chrono: True\n</code></pre> <p>Ou le tri par criticit\u00e9 :</p> <pre><code>tri-chrono: False\n</code></pre> <p>Une fois 'conf.yaml' \u00e9dit\u00e9 \u00e0 votre guise, vous pouvez ouvrir votre navigateur favori \u00e9quip\u00e9 de l'extension LiveHosts et entrer l'URL suivante :</p> <pre><code>aggreg.net\n</code></pre> <p>Vous acc\u00e9dez ainsi \u00e0 votre page de log des \u00e9v\u00e9nements, actualis\u00e9e automatiquement !</p>"},{"location":"StyleCss/","title":"DOCUMENTATION SAE203","text":""},{"location":"StyleCss/#cest-ici-que-ce-trouve-stylecss","title":"C'est ici que ce trouve style.css","text":"<pre><code>@font-face {\n    font-family: fontHeader;\n    src: url(Prototype.ttf);\n}\n\nheader {    \n    display: flex;\n    flex-direction: column; \n    align-items: center; \n    justify-content: center; \n    font-family: fontHeader;\n    font-size: 30px;\n    font-weight: bold;\n    background-color: rgba(0, 0, 0, 0.5);\n    color: #dfdfdfef;\n    text-align: center;\n}\n\nbody {\n    font-size: 18px;\n    font-family: fontHeader;\n    color: #dfdfdfef;\n    margin: auto;\n    padding: auto;\n    box-sizing: border-box;\n    background: rgba(0, 0, 0, 0.925); \n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n    text-align: center; \n}\n\nbody::before {\n    content: \"\";\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: url('fond.jpg');\n    background-size: cover; \n    z-index: -1; \n    opacity: 0.5; \n}\n\narticle {\n    background-color: rgba(0, 0, 0, 0.5);\n    color: #dfdfdfef;\n    padding: 1em;\n    margin: 1em 0;\n    border-radius: 10px;\n    text-align: center; \n}\n\narticle h2 {\n    font-size: 24px;\n    margin: 0 0 0.5em;\n}\n\narticle p {\n    margin: 0.5em 0;\n}\n\narticle a {\n    color: #dfdfdfef;\n    text-decoration: none;\n    font-weight: bold;\n}\n</code></pre>"},{"location":"dl/","title":"DOCUMENTATION SAE203","text":""},{"location":"dl/#vous-trouverez-ci-dessous-les-fichiers-sources-necessaires","title":"Vous trouverez ci-dessous les fichiers sources n\u00e9cessaires","text":"<p>Lien des fichiers sources</p>"},{"location":"faq/","title":"DOCUMENTATION SAE203","text":""},{"location":"faq/#faq","title":"FAQ","text":"<p>Bien que la documentation traite de tous les points n\u00e9cessaires pour le bon fonctionnement de la solution, vous pourrez tout de m\u00eame rencontrer quelques soucis 'type'.</p>"},{"location":"faq/#pourquoi-ma-page-aggregnet-nest-elle-pas-stylisee","title":"Pourquoi ma page 'aggreg.net' n'est-elle pas stylis\u00e9e ?","text":"<p>Pour commencer, un probl\u00e8me souvent remarqu\u00e9 lors du d\u00e9ploiement de cette solution informatique, c'est le manque de la configuration style dans notre page web.</p> <p>Voici les quelques \u00e9tapes \u00e0 suivre :</p> <ul> <li> <p>Bien entendu, v\u00e9rifier que les droits des fichiers concern\u00e9s soient bien r\u00e9gl\u00e9s.</p> </li> <li> <p>La position dans l'arborescence est primordiale ! V\u00e9rifiez donc que :</p> <pre><code>style.css ---- fichier se trouve sur le serveur Apache soit :\n\n/var/www/aggreg/\n</code></pre> </li> <li> <p>Bien v\u00e9rifier que, sur le programme Python, style.css soit appel\u00e9 au bon endroit.</p> </li> </ul> <p>Si style.css se trouve dans le m\u00eame r\u00e9pertoire que index.html, alors :</p> <pre><code>\n    &lt;html lang=\"fr\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;title&gt;Logs des \u00c9venement&lt;/title&gt;                                       \n    &lt;link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\"/&gt;   #&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Mettre le bon lien, dans ce cas, simplement le nom de la fiche de style          \n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Logs des \u00c9venement - {date_heure_actuelle}&lt;/h1&gt;\\n\\n\"\"\")  \n\n</code></pre>"},{"location":"faq/#comment-installer-le-service-automatiquement","title":"Comment installer le service automatiquement ?","text":"<p>Pour le moment, aggreg.py ne propose pas d'installation enti\u00e8rement automatique, mais les \u00e9quipes travaillent pour faire une solution d'installation plus simple pour l'exp\u00e9rience utilisateur.</p> <p>Restez inform\u00e9 sur notre Gitlab pour d'\u00e9ventuelles avanc\u00e9es !</p>"},{"location":"faq/#jai-dautres-problemes-non-notifies","title":"J'ai d'autres probl\u00e8mes non notifi\u00e9s ?","text":"<p>Si vous avez bien suivi le guide d'installation et de param\u00e9trage et le guide d'utilisation et qu'il reste encore des soucis pas r\u00e9solus dans la FAQ.</p> <p>Veuillez nous les notifier via l'adresse mail suivante :</p> <pre><code>jason.vachier@etu.univ-amu.fr\n</code></pre> <p>Nous essayerons de tenir cette FAQ \u00e0 jour avec les potentielles futures probl\u00e9matiques rencontr\u00e9es par les utilisateurs.</p>"}]}